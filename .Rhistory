filter(Gene == select_gene,
!is.na(Sz_onset)) %>%
rename(phenotype_fac = phenotype) %>%
filter(Vartype != "Synonymous",
Vartype != "Complex",
Vartype != "Missense mosaic") %>%
mutate(ID = paste0(phenotype_fac,ifelse(Vartype == "Missense","Missense","PTV"))) %>%
arrange(ID) %>%
mutate(ID = factor(ID, levels = unique(ID))) %>%
group_by(ID) %>%
summarise(n = n()) %>%
mutate(n_gene = sum(n))%>%
assign("save",.,envir = .GlobalEnv),
x = ~ ID,
y = ~ n,
color = ~ ID,
colors = colors_sel,
type = "bar",
hoverinfo = "text", showlegend = FALSE,
text= ~ paste0(round(n/n_gene, digits = 2), " (" ,n," individuals)")) %>%
layout(title="",
font=plotly_font,
xaxis = list(title="",tickangle=45,showline = T),
yaxis = list(title="Number of patients",showline = T)) %>%
config(modeBarButtonsToRemove = goodbye, displaylogo = FALSE)
}
Phenotype_wordcl.fun <- function(Patient_data.df){
Patient_filtered.df <- Patient_data.df %>%
select(26:28,31:38)
wc_input <- colSums(is.na(Patient_filtered.df))
word_cloud_input.df<- tibble(word = names(wc_input) %>% str_replace_all(.,"_"," "),freq = wc_input) %>%
mutate(angle = 90 * sample(c(0, 1), nrow(.), replace = TRUE, prob = c(30, 70)))
set.seed(24)
gg_out <- ggplot(word_cloud_input.df, aes(
label = word, size = freq,
angle = angle
)) +
geom_text_wordcloud_area() +
scale_size_area(max_size = 12) +
theme_minimal()
return(gg_out)
}
basic_onset_legend <- function(){
legend <- data.frame(x=c(1,3), y=c(3,3), text=c("Missense", "PTV       "))
plot <- ggplot(legend, aes(x=x, y=y, color=text))+
geom_point(size = 8)+
scale_color_manual(values = c("Missense"="#BEBADA","PTV       "="#FDB462"))+
ylim(c(2.9,3.1))+
xlim(c(0.8,5.2))+
theme_void()+
geom_text(aes(label=text), hjust=-0.2, color="black", size =5)+
theme(legend.position = "none")
return(plot)
}
#variant analysis<
#### Variant Analysis- Variant selection ####
get_var_conseq_cDNA <- function(cDNA_input,gene_input, all_exchanges.df){
cDNA_sel <- str_remove(cDNA_input,"c\\.") %>% tolower()
cDNA_pos_sel <- str_extract_all(cDNA_sel,"[0-9]+") %>% unlist() %>% as.numeric()
cDNA_alt_sel <- str_split(cDNA_sel,">|dup|del|ins",simplify = T) %>% .[,length(.)]
cDNA_ref_sel <- case_when(str_detect(cDNA_sel,"ins") ~ str_split(cDNA_sel,"ins",simplify = T) %>% .[1] %>% str_sub(.,-1,-1),
str_detect(cDNA_sel,"del") ~"del",
str_detect(cDNA_sel,">") ~ str_split(cDNA_sel,">",simplify = T) %>% .[1] %>% str_sub(.,-1,-1),
str_detect(cDNA_sel,"dup") ~ str_split(cDNA_sel,"dup",simplify = T) %>% .[1] %>% str_sub(.,-1,-1),
TRUE~"error")
variant_conseq <- case_when(length(cDNA_pos_sel) == 1 & str_detect(cDNA_sel,"ins") & nchar(cDNA_alt_sel) %%3 == 0 ~ "Inframe Insertion",
length(cDNA_pos_sel) == 1 & str_detect(cDNA_sel,"ins") & nchar(cDNA_alt_sel) %%3 != 0 ~ "Frameshift Insertion",
length(cDNA_pos_sel) == 1 & str_detect(cDNA_sel,"del") & nchar(cDNA_alt_sel) %%3 == 0 ~ "Inframe Deletion",
length(cDNA_pos_sel) == 1 & str_detect(cDNA_sel,"del") & nchar(cDNA_alt_sel) %%3 != 0 ~ "Frameshift Deletion",
length(cDNA_pos_sel) == 1 & str_detect(cDNA_sel,"dup") & nchar(cDNA_alt_sel) %%3 == 0 ~ "Inframe Duplication",
length(cDNA_pos_sel) == 1 & str_detect(cDNA_sel,"dup") & nchar(cDNA_alt_sel) %%3 != 0 ~ "Frameshift Duplication",
length(cDNA_pos_sel) == 2 & str_detect(cDNA_sel,"\\+|\\-") & cDNA_pos_sel[2] <=5~ "splice-site",
length(cDNA_pos_sel) == 2 & str_detect(cDNA_sel,"\\+|\\-") & cDNA_pos_sel[2] >5~ "intronic",
length(cDNA_pos_sel) == 1 & cDNA_ref_sel != "error"~ "Missense",
TRUE ~ "No valid input")
variant_conseq <- ifelse(cDNA_ref_sel == "error" |
(str_detect(cDNA_sel,"ins") & str_detect(cDNA_sel,"dup")) |
(str_detect(cDNA_sel,"ins") & str_detect(cDNA_sel,"del")) |
(str_detect(cDNA_sel,"dup") & str_detect(cDNA_sel,"del")), "No valid input", variant_conseq)
if(variant_conseq == "Missense"){
#if cDNA_pos_error is empty this cDNA_pos does not exist in this gene
cDNA_pos_true.df <- all_exchanges.df %>%
filter(Gene == gene_input,
cDNA_pos == cDNA_pos_sel)
variant_conseq_miss <- all_exchanges.df %>%
filter(Gene == gene_input,
cDNA_pos == cDNA_pos_sel,
Allele == cDNA_ref_sel %>% toupper(),
cDNA_alt == cDNA_alt_sel %>% toupper()) %>%
.$Vartype
variant_conseq <- case_when(nrow(cDNA_pos_true.df) == 0~"This is not a valid cDNA position",
identical(variant_conseq_miss, character(0)) & cDNA_ref_sel != cDNA_alt_sel~paste("No valid nucleotide exchange. The reference nuleotide at this position is",cDNA_pos_true.df$Allele[1]),
cDNA_ref_sel == cDNA_alt_sel~ "Reference and alternative nucelotide must not be the same.")
variant_conseq <- ifelse(!is.na(variant_conseq), variant_conseq,variant_conseq_miss)
}
if(variant_conseq == "splice-site"){
if(cDNA_pos_sel[1]< 6){
variant_conseq <- "5'UTR variant"
} else if (cDNA_pos_sel[1]> max(master.df %>% filter(Gene == gene_input) %>% .$cDNA_pos,na.rm = T)){
variant_conseq <- "3'UTR variant"
} else{
splice_master.df <- master.df %>%
filter(Gene ==gene_input,
cDNA_pos > cDNA_pos_sel[1]-6,
cDNA_pos < cDNA_pos_sel[1]+6)
if(max(splice_master.df$Genomic_pos)-min(splice_master.df$Genomic_pos) <12){
variant_conseq <- "Selected splice variant is not close to a splice site"
}
}
}
return(variant_conseq)
}
#Protein
get_var_conseq_Protein <- function(protein_input,gene_input, all_exchanges.df){
protein_sel <- str_remove(protein_input,"p\\.") %>% tolower()
protein_pos_sel <- str_extract_all(protein_sel,"[0-9]+") %>% unlist() %>% as.numeric()
#alternative
protein_alt_sel <- str_split(protein_sel,"[0-9]+",simplify = T) %>% .[2]
if(is.na(protein_alt_sel)){
protein_alt_sel <- NA
} else if(protein_alt_sel == "X"| protein_alt_sel == "x"|protein_alt_sel == "*"| tolower(protein_alt_sel) == "stop"){
##search for stop codoons
protein_alt_sel <- "Stop"
}else if (nchar(protein_alt_sel) == 3){
protein_alt_sel <- paste0(str_sub(protein_alt_sel,1,1) %>% toupper(),str_sub(protein_alt_sel,2,3) %>% tolower()) %>% a()
}else{
protein_alt_sel <- protein_alt_sel %>% toupper()
}
protein_ref_sel <- str_split(protein_sel,"[0-9]+",simplify = T) %>% .[1]
#reference
if(is.na(protein_ref_sel)){
protein_ref_sel <- NA
}else if(protein_ref_sel == "X"| protein_ref_sel == "x"|protein_ref_sel == "*"| tolower(protein_ref_sel) == "stop"){
protein_ref_sel <- "Stop"
}else if (nchar(protein_ref_sel) == 3){
protein_ref_sel <- paste0(str_sub(protein_ref_sel,1,1) %>% toupper(),str_sub(protein_ref_sel,2,3) %>% tolower()) %>% a()
}else{
protein_ref_sel <- protein_ref_sel %>% toupper()
}
#generate variant consequence
if(is.na(protein_ref_sel) | is.na(protein_alt_sel) | length(protein_pos_sel)>1 | length(protein_pos_sel) == 0 | (nchar(protein_ref_sel)  != 1 & protein_ref_sel != "Stop") | (nchar(protein_alt_sel)  != 1 & protein_alt_sel != "Stop")){
variant_conseq <- "No valid input. Only single aminoacid exchanges are accepted."
}else{
protein_ref_sel <- ifelse(protein_ref_sel != "Stop", aaa(protein_ref_sel),"Stop")
protein_alt_sel <- ifelse(protein_alt_sel != "Stop", aaa(protein_alt_sel),"Stop")
#check if aminoacid position exist in this gene
AA_pos_true.df <- all_exchanges.df %>%
filter(Gene == gene_input,
AA_pos == protein_pos_sel)
#check if selected reference aminoacid is correct
true_ref_aminoacid_check.df <- all_exchanges.df %>%
filter(Gene == gene_input,
AA_pos == protein_pos_sel,
AA_ref == protein_ref_sel)
true_ref_aminoacid.df <- all_exchanges.df %>%
filter(Gene == gene_input,
AA_pos == protein_pos_sel)
variant_conseq <- case_when(nrow(AA_pos_true.df) == 0~ "Amino acid position does not exist in this gene",
nrow(true_ref_aminoacid_check.df) == 0~ paste0("Wrong reference amino acid. The reference amino acid is:",true_ref_aminoacid.df$AA_ref[1]),
protein_alt_sel == protein_ref_sel ~"Synonymous",
protein_alt_sel == "Stop"~ "Stop-gain",
protein_pos_sel ==1~ "Stop-loss",
(protein_alt_sel %in% (all_exchanges.df$AA_alt %>% unique() %>% .[.!= "Stop"] ))~ "Missense",
TRUE~"No valid alternative amino acid.")
}
return(variant_conseq)
}
extract_gnomad_features <- function(Control_data.df,selected.df,variable,label){
if(label == "exchange"){
control_int.df <- Control_data.df %>% filter(Gene == selected.df$Gene[1], AA_pos == selected.df$AA_pos[1], AA_alt == selected.df$AA_alt[1])
control_int2.df <- Control_data.df %>% filter(Gene == selected.df$Gene[1], AA_pos == selected.df$AA_pos[1])
if(variable == "Allele count"){
out <- ifelse(nrow(control_int.df) == 0,0,control_int.df$Allele_count)
}else if(variable == "Allele freq"){
out <- ifelse(nrow(control_int.df) == 0,0,control_int.df$Allele_freq)
}
}else if(label == "position"){
control_int.df <- Control_data.df %>% filter(Gene == selected.df$Gene[1], AA_pos == selected.df$AA_pos[1])
if(variable == "Allele count"){
out <- ifelse(nrow(control_int.df) == 0,0,sum(control_int.df$Allele_count))
}else if(variable == "Allele freq"){
out <- ifelse(nrow(control_int.df) == 0,0,sum(control_int.df$Allele_freq))
}
}
return(out)
}
##map paraz score
map_paraz <- function(data_scores.df){
plot <- ggplot(data_scores.df , aes(x = AA_pos, y = Paraz_score, fill = group)) +
geom_bar(stat = "identity") +
theme_bw() + theme(panel.border = element_blank(),
legend.position = "none",
legend.title = element_blank()) +
scale_fill_manual(values = c("gray","indianred"))+
coord_cartesian(ylim = c((min(data_scores.df$Paraz_score,na.rm = T)-0.25),
max(data_scores.df$Paraz_score,na.rm = T)+0.25),
expand = FALSE) +
labs(title="Paralog conservation",
y="Parazscore",
x = paste0("Amino acid sequence"))
return(plot)
}
##map mtrscore
map_mtr <- function(data_scores.df){
mtr_threshold = data_scores.df$MTR_score %>% sort() %>% .[round(length(.)/4)] #lowest 25% of values. This threshold is dervied from the publication of the score
mtr_threshold_hard = data_scores.df$MTR_score %>% sort() %>% .[round(length(.)/20)] #lowest 5% of values. This threshold is dervied from the publication of the score
plot <- ggplot(data_scores.df, aes(x = AA_pos, y = MTR_score, colour=(MTR_score<mtr_threshold))) +
#geom_line(aes(group=group)) +
geom_point(aes(x = AA_pos2), color = "purple")+
#scale_color_manual(values = c("gray","indianred1"),
#                   labels = c("Tolerant region", "Intolerant region")) +
geom_hline(aes(yintercept=mtr_threshold), colour="orange", linetype="dashed")  +
geom_hline(aes(yintercept=mtr_threshold_hard), colour="indianred1", linetype="dashed")  +
coord_cartesian(expand = FALSE) +
theme_bw() + theme(panel.border = element_blank(),
legend.position = "right",
legend.direction = "vertical") +
labs(title="Missense Tolerance Ratio",
y="MTR",
x = paste0("Amino acid sequence"),
colour = "Patient Variants")
return(plot)
}
#Research 3d mapping
map_var_3d <- function(data,Gene_sel,gnomad_bool,pdb_sel,structure_coordinates,sub_color_i){
variant.df <- data %>%
filter(Gene == Gene_sel) %>%
filter(Vartype == "Missense") %>%
mutate(label = "pathogenic") %>%
group_by(AA_pos,AA_ref,Gene) %>%
summarise(n_occ = n()) %>%
select(AA_pos,AA_ref,n_occ,Gene)
gnomad.df <- Control_data.df %>%
filter(Gene == Gene_sel) %>%
group_by(AA_pos,AA_ref,Gene) %>%
summarise(n_occ = n()) %>%
select(AA_pos,AA_ref,n_occ,Gene)
structure.df <- read_delim(structure_coordinates,delim = "\t") %>%
mutate(Aminoacid = aaa(Aminoacid)) %>%
select(Uniprot_position,Aminoacid,Position_in_structure,gene,chain)
variant.df <- variant.df %>%
left_join(structure.df,by = c("AA_pos" = "Uniprot_position","AA_ref" = "Aminoacid","Gene" = "gene")) %>%
mutate(struc_cov = ifelse(is.na(Position_in_structure),"no","yes")) %>%  #this column constraints the information whether a variant can be displayed on the structure or not
filter(struc_cov == "yes")
gnomad.df <- gnomad.df %>%
left_join(structure.df,by = c("AA_pos" = "Uniprot_position","AA_ref" = "Aminoacid","Gene" = "gene")) %>%
mutate(struc_cov = ifelse(is.na(Position_in_structure),"no","yes")) %>%  #this column constraints the information whether a variant can be displayed on the structure or not
filter(struc_cov == "yes")
sub_color <- c("#e2f970","#6fbbf7","#ee6c71","#ffbc5a","#bf73cc")
sub_scale <- c(1.2,0.8)
struc_color <- "wheat"
rot = 270
rot_axis = "x"
spin_axis = "vy"
#Specify yourself- color of the cartoon per subunit
subunit_color <- c("wheat","white") #
print(variant.df)
print("now gnomad")
print(gnomad.df)
#Model for the protein complex
modelo <- r3dmol(
viewer_spec = m_viewer_spec(
cartoonQuality = 10,
lowerZoomLimit = 50,
upperZoomLimit = 1000
)
)
modelo <- modelo %>% m_add_model(data = pdb_sel, format = "pdb")
# Zoom to encompass the whole scene
modelo <- modelo %>% m_zoom_to() %>%
# Set color o cartoon representation
m_set_style(style = m_style_cartoon(color = struc_color)) %>% # select a color of the structure
# Set subunit colors
m_set_style(
sel = m_sel(chain = c("A")),
style = m_style_cartoon(color = subunit_color[2])
) %>%
# visualize variants grin1
m_set_style(
sel = m_sel(resi = variant.df$Position_in_structure,
atom = "CA",
chain = c("A")),
style = m_style_sphere(colorScheme = NULL,
color = sub_color[sub_color_i],
scale = sub_scale[1])
)
if  (gnomad_bool == TRUE) {
modelo <- modelo %>% m_set_style(
sel = m_sel(resi = gnomad.df$Position_in_structure,
atom = "CA",
chain = c("A")),
style = m_style_sphere(colorScheme = NULL,
color = "#333333",
scale = sub_scale[2]))
}
return(modelo)
}
## substitute for seqinr function
three_to_one_aa <- function(sequence){
sapply(sequence, function(x){
ifelse(is.na(x),NA,seqinr::aaa(x))
}) %>%
as.vector() %>%
return()
}
############## DATA ############
#Load domain data
Domain_data.df <- read_delim("data/Domain.txt", delim = "\t") %>%
select(Aln_pos,Domain,Domain_color)
#Load all possible exchanges
all_exchanges.df <- read_delim("data/master_table_exchanges.txt",delim = "\t") %>%
left_join(Domain_data.df %>% distinct(Aln_pos,Domain,Domain_color)) %>%
mutate(AA_ref = aaa(AA_ref),
AA_alt = convert_aa(AA_alt),
Vartype = ifelse(Vartype == "Stop Gained","Stop-gain", Vartype))
#Load master table
master.df <- read_delim("data/master_table.txt", delim = "\t")
#load domains
Domain_gene.df <- master.df %>%
left_join(Domain_data.df %>% distinct(Aln_pos,Domain,Domain_color)) %>%
distinct(Gene,AA_pos,Domain,Domain_color) %>%
ungroup()
# #PER-2D
# per_family2d.df <- read_delim("data/per2d_genewise.txt", delim = "\t")
#
# per2d_for_var_analysis.df <- read_delim("data/per2d_genewise.txt", delim = "\t")
#
# per2d.df <- read_delim("data/per2d_genewise.txt", delim = "\t") %>%
#   mutate(Hotzone_2D = ifelse(per == "PER","PER","No-PER")) %>%
#   select(Hotzone_2D,AA_pos,pvalue,odds) %>%
#   rename(pvalue_per3d = "pvalue",
#          odds_per3d = "odds")
# #PER-3D
# per3d.df <- read_delim("data/per3d.txt", delim = "\t") %>%
#   select(PER3D,AA_pos,pvalue,odds) %>%
#   rename(pvalue_per2d  = "pvalue",
#          odds_per2d  = "odds")
# #Load functional data
# Functional_data.df <- read_delim("data/Functional_data.txt", delim = "\t") %>%
#   rename(uptake = "GABA uptake (vs wt)",
#          surface_exp = "Surface expression (vs wt)",
#          total_exp = "Total expression (vs wt)",
#          relative_update_surface_exp = "Relative uptake/surface expression",
#          relative_surface_exp_tot_exp = "Relative surface expression/total expression") %>%
#   filter(!is.na(AA_pos),
#          AA_alt != "X") %>%
#   select(AA_pos,AA_alt,uptake,surface_exp,total_exp,relative_update_surface_exp,relative_surface_exp_tot_exp)
#Load patient and control data
Patient_data.df <- read_delim("data/SATB2_Patient_variants_v1.txt", delim = "\t") %>%
select(-Transcript) %>%
mutate(AA_pos = as.numeric(AA_pos)) %>%
#this ensures that splice cite mutation are shown in the genotype overview plot
mutate(cDNA_pos = str_extract(Original_cDNA_change, "[0-9]+") %>% as.numeric()) %>%
left_join(master.df %>%
select(AA_pos,cDNA_pos) %>%
dplyr::rename(AA_pos_splice_site = "AA_pos")) %>%
mutate(AA_pos = ifelse(Vartype == "splice site",AA_pos_splice_site,AA_pos),
AA_alt = ifelse(!is.na(AA_alt) & AA_alt == "STOP","Stop",
ifelse(!is.na(AA_alt),AA_alt,NA))) %>%
##
left_join(master.df %>% distinct(Transcript,Gene,AA_pos), by = c("AA_pos" = "AA_pos","Gene" = "Gene")) %>%
left_join(Domain_gene.df %>% distinct(Domain,Gene,AA_pos,Domain_color), by = c("AA_pos" = "AA_pos","Gene" = "Gene")) %>%
mutate(AA_ref = ifelse(!is.na(AA_ref),AA_ref,"XXX"), #%>% aaa(), ##warnings due to none matching aminoacids are fine
#AA_alt_complex = ifelse(Vartype == "Missense",AA_alt,AA_alt_complex),
cDNA = ifelse(!is.na(cDNA_pos), paste0("c.",cDNA_pos,cDNA_ref,">",cDNA_alt), "Not available"),
#Protein = paste0("p.",AA_ref,AA_pos,AA_alt_complex),
Protein = Original_AA_change) %>%
mutate(rowID = 1:nrow(.)) ##used to ensure intersect of res_mod/ resmod_ini does a proper job
Patient_data_missense_only.df <- Patient_data.df %>%
filter(Vartype == "Missense")
# mutate(AA_alt = three_to_one_aa(AA_alt))
Control_data.df <- read_delim("data/gnomad_variants.txt", delim = "\t") %>%
mutate(AA_ref = aaa(AA_ref)) %>% #,
#AA_alt = convert_aa(AA_alt)) %>%
# left_join(per3d.df) %>%
# left_join(per2d.df) %>%
left_join(Domain_gene.df %>% distinct(Domain,Gene,AA_pos,Domain_color), by = c("AA_pos" = "AA_pos","Gene" = "Gene"))
#Load Scores
#Paraz/MTR
# paraz_mtr.df <- read_delim("data/mtr_paraz_slc6a1.txt",delim = "\t")
#hotzones3D on structure
#PER3D_struc.df <- read_delim("data/pdb/6j8e_varburden.txt", delim = "\t")
#Load ClinVar data for Variant Analysis
clinvar.df <- read_delim("data/Clinvar_links_SATB2.txt", delim = "\t")
##### Variables #####
#Basic Information
basic_gene1 = "SATB2"
basic_phenotype_fac = "Epilepsy"
basic_phenotype_num = "Sz_onset"
phenotype_name1 <- "Epilepsy"
phenotype_name2 <- "Seizure onset (months)"
phenotype_name3 <- "Seizure onset (months)"
basic_phenotype_colors <- RColorBrewer::brewer.pal(20,"Set3") # Warning occurs at the moment, can be ignored for now
##add here the colors for all phenotypes
basic_phenotype_colors <- c("Female"="#F97EE5","Male"="#0404B1",
" Yes" ="#F97EE5", "No"= "#0404B1", "Yes" = "#F97EE5",
" None" = "#9191fd","None" = "#9191fd" ,"1 to 10"= "#4747fb" ,"10 to 50" = "#0404b1","Greater than 50" ="#02026a")
basic_phenotype_colors_ID <- c("black","grey","#994714")
basic_phenotype_colors_yes_no <-  c("No" = "grey",
" Yes" = "#EFC56F",
"Yes" = "#EFC56F")
basic_phenotype_colors_speech <- c("10 to 50" = "grey40",
"Greater than 50" = "grey20",
"None" = "grey80",
"1 to 10" = "grey60")
colors_gene1 <-  c("#BEBADA","#FDB462","#BEBADA","#FDB462")
##### Variant Analysis variable #####
variant_title1 <- "Epilepsy"
variant_title2 <- "Autism"
variant_title3 <- "Seizure onset"
#####Research variable #####
Gene_colors <-  c("Patient"="red",
"Control" = "blue",
"Other" = "#333333")
research_phenotype1_title <- "Number of patient variants per unit"
research_phenotype2_title <- "Epilepsy"
research_phenotype3_title <- "Seizure onset"
research_phenotype4_title <- "Autism"
research_phenotype5_title <- "Cognitive development"
research_phenotype6_title <- "Epilepsy syndrome classification"
research_functional1_title <- "Variants with molecular function assessment"
#3d_mapping Genotype interface
pdb_sel_gene1 = "data/pdb/SCN1A_model.pdb1"
structure_coordinates_gene1 <- "data/pdb/7dtd_structure_coordinates.txt"
pdb_sel_gene2 = "data/pdb/SCN2A_model.pdb1"
structure_coordinates_gene2 <- "data/pdb/6j8e_structure_coordinates.txt"
pdb_sel_gene3 = "data/pdb/SCN2A_model.pdb1"
structure_coordinates_gene3 <- "data/pdb/SCN3A_6j8e_structure_coordinates.txt"
pdb_sel_gene4 = "data/pdb/SCN2A_model.pdb1"
structure_coordinates_gene4 <- "data/pdb/SCN8A_6j8e_structure_coordinates.txt"
Phenotype_num_1.fun(basic_gene1, "Age_walk_months", colors_gene1, "Age (months)",T, "months",5)
basic_gene1, "Age_walk_months", colors_gene1, "Age (months)",T, "months",5
select_gene <- basic_gene1
phenotype <- "Age_walk_months"
colors_sel <- colors_gene
detailed_hov <- T
y_axis_title <- "Age (months)"
scale <- "months"
min_filt <- 5
colors_sel <- colors_gene1
detailed_hov <- T
y_axis_title <- "Age (months)"
scale <- "months"
min_filt <- 5
out <- plot_ly(Patient_data.df %>%
dplyr::rename(onset = phenotype) %>%
filter(onset > min_filt) %>% ##introduced a filter what small numbers are allowed
mutate(p_variant = paste0("p.",AA_ref,AA_pos,AA_alt)) %>%
filter(!is.na(onset)) %>%
ungroup() %>%
assign("save",.,envir = .GlobalEnv),
y = ~onset, type = "box",x = "",
boxpoints = "all", jitter = 0.3,
pointpos = 0, hoverinfo = "text", showlegend = FALSE,
text= ~paste0(round(onset, digits = 2), " ",scale,", ", Protein)) %>% ##sclae accounts for "months" or "years"
layout(font=plotly_font,
title="",
xaxis = list(title="", tickangle = 45, showline = T),
yaxis = list(
title = y_axis_title,
tickmode = "array",
showline = T
)) %>%
config(modeBarButtonsToRemove = goodbye, displaylogo = FALSE)
out
Patient_data.df %>%
dplyr::rename(onset = phenotype) %>%
filter(onset > min_filt) %>% ##introduced a filter what small numbers are allowed
mutate(p_variant = paste0("p.",AA_ref,AA_pos,AA_alt)) %>%
filter(!is.na(onset)) %>%
ungroup()
t <- Patient_data.df %>%
dplyr::rename(onset = phenotype) %>%
filter(onset > min_filt) %>% ##introduced a filter what small numbers are allowed
mutate(p_variant = paste0("p.",AA_ref,AA_pos,AA_alt)) %>%
filter(!is.na(onset)) %>%
ungroup()
t$onset
#Load patient and control data
Patient_data.df <- read_delim("data/SATB2_Patient_variants_v1.txt", delim = "\t") %>%
select(-Transcript) %>%
mutate(AA_pos = as.numeric(AA_pos)) %>%
#this ensures that splice cite mutation are shown in the genotype overview plot
mutate(cDNA_pos = str_extract(Original_cDNA_change, "[0-9]+") %>% as.numeric()) %>%
left_join(master.df %>%
select(AA_pos,cDNA_pos) %>%
dplyr::rename(AA_pos_splice_site = "AA_pos")) %>%
mutate(AA_pos = ifelse(Vartype == "splice site",AA_pos_splice_site,AA_pos),
AA_alt = ifelse(!is.na(AA_alt) & AA_alt == "STOP","Stop",
ifelse(!is.na(AA_alt),AA_alt,NA))) %>%
##
left_join(master.df %>% distinct(Transcript,Gene,AA_pos), by = c("AA_pos" = "AA_pos","Gene" = "Gene")) %>%
left_join(Domain_gene.df %>% distinct(Domain,Gene,AA_pos,Domain_color), by = c("AA_pos" = "AA_pos","Gene" = "Gene")) %>%
mutate(AA_ref = ifelse(!is.na(AA_ref),AA_ref,"XXX"), #%>% aaa(), ##warnings due to none matching aminoacids are fine
#AA_alt_complex = ifelse(Vartype == "Missense",AA_alt,AA_alt_complex),
cDNA = ifelse(!is.na(cDNA_pos), paste0("c.",cDNA_pos,cDNA_ref,">",cDNA_alt), "Not available"),
#Protein = paste0("p.",AA_ref,AA_pos,AA_alt_complex),
Protein = Original_AA_change) %>%
mutate(rowID = 1:nrow(.)) %>%
replace(.,"N/A",NA)##used to ensure intersect of res_mod/ resmod_ini does a proper job
View(Patient_data.df)
str(Patient_data.df)
runApp()
runApp()
runApp()
runApp()
View(Patient_data.df)
Patient_data.df$Abnormal_brainMRI
Patient_data.df$Abnormal_brainMRI %>% unique()
Patient_data.df %>%
na_if("N/A") %>% distinct(Abnormal_brainMRI)
runApp()
