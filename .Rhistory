geom_segment(aes(x=AA_pos, xend=AA_pos, y=2, yend=ifelse(Vartype=="Missense", 7,8)), colour="black")+
geom_point(aes(x=AA_pos, y=ifelse(Vartype=="Missense", 7,8), color=Vartype, text=Protein_final))+
geom_rect(data=research_genotype_domain.df, aes(xmin=start, xmax=end, ymin=2, ymax=2.5, fill=Domain, text=Domain))+
theme_classic()+
ylim(c(1.7,10))+
labs( x= "Amino acid sequence")+
scale_color_manual(values = lolliplot_fill_scheme)+
scale_fill_manual(values = lolliplot_fill_scheme)+
#facet_grid(Gene ~ .)+
theme(
text = element_text(size = 10),
axis.title.y = element_blank(),
axis.title.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.line.y = element_blank(),
legend.position = "none")
if (input$gnomad_m == TRUE) {
g <- g + geom_point(data=Control_data.df ,
size=2, color = "black", aes(x=AA_pos, y=2, alpha=0.1*Allele_count, text=paste0("Position: ",AA_pos,", Allele count: ", Allele_count)))
}
g <- ggplotly(g, tooltip = "text") %>%
config(modeBarButtonsToRemove = goodbye, displaylogo = FALSE)  %>%
layout(title="",font=plotly_font,
xaxis = list(title = "Amino acid sequence")
)
})
output$Genotype_legend_plot <- renderPlot({
legend <- data.frame(x=c(1,11,21), y=c(1, 1, 1), text=c("Missense", "   PTV", "Control"))
plot <- ggplot(legend, aes(x=x, y=y, color=text))+
geom_point(size = 6)+
scale_color_manual(values = c("Missense"="#D55E00","   PTV"="#0072B2","Control" ="#000000"))+
ylim(c(0,2))+
xlim(c(0,40))+
theme_void()+
geom_text(aes(label=text), hjust=-0.4, color="black")+
theme(legend.position = "none")
return(plot)
})
output$threeDmolGene_all <- renderR3dmol({
validate(need(
nrow(res_mod() %>% filter(Vartype == "Missense")) >0,
"There is no data that matches your filters."
))
variant.df <- res_mod() %>%
filter(Vartype == "Missense") %>%
mutate(label = "pathogenic") %>%
group_by(AA_pos,AA_ref,Gene) %>%
dplyr::summarise(n_occ = n()) %>%
select(AA_pos,AA_ref,n_occ,Gene)
gnomad.df <- Control_data.df %>%
group_by(AA_pos,AA_ref,Gene) %>%
filter(Domain %in% unique(res_mod() %>% .$Domain)) %>%
dplyr::summarise(n_occ = n()) %>%
select(AA_pos,AA_ref,n_occ,Gene)
structure.df <- read_delim("data/pdb/SATB2_AF.txt",delim = "\t") %>%
mutate(Aminoacid = aaa(Aminoacid)) %>%
select(Uniprot_position,Aminoacid,Position_in_structure,gene,chain)
variant.df <- variant.df %>%
left_join(structure.df,by = c("AA_pos" = "Uniprot_position","AA_ref" = "Aminoacid","Gene" = "gene")) %>%
mutate(struc_cov = ifelse(is.na(Position_in_structure),"no","yes")) %>%  #this column constraints the information whether a variant can be displayed on the structure or not
filter(struc_cov == "yes") %>%
distinct(Position_in_structure,Gene) %>%
group_by(Position_in_structure) %>%
dplyr::summarise(var_mut = ifelse(n() >1,"mutiple",Gene))
gnomad.df <- gnomad.df %>%
left_join(structure.df,by = c("AA_pos" = "Uniprot_position","AA_ref" = "Aminoacid","Gene" = "gene")) %>%
mutate(struc_cov = ifelse(is.na(Position_in_structure),"no","yes")) %>%  #this column constraints the information whether a variant can be displayed on the structure or not
filter(struc_cov == "yes") %>%
distinct(Position_in_structure,Gene) %>%
group_by(Position_in_structure) %>%
dplyr::summarise(var_mut = ifelse(n() >1,"mutiple",Gene))
sub_color <- c("red","black")
sub_scale <- c(1.2,0.8)
struc_color <- "white"
rot = 270
rot_axis = "x"
spin_axis = "vy"
#Specify yourself- color of the cartoon per subunit
subunit_color <- c("wheat","white") #first color for GRIN1 second or GRIN2A
#Model for the protein complex
modelo <- r3dmol(
viewer_spec = m_viewer_spec(
cartoonQuality = 10,
lowerZoomLimit = 50,
upperZoomLimit = 1000
)
modelo <- modelo %>% m_add_model(data = "data/pdb/SATB2.pdb", format = "pdb")
# Zoom to encompass the whole scene
modelo <-modelo %>% m_zoom_to() %>%
# Set color o cartoon representation
m_set_style(style = m_style_cartoon(color = struc_color)) %>% # select a color of the structure
# Set subunit colors
m_set_style(
sel = m_sel(chain = c("A")),
style = m_style_cartoon(color = subunit_color[2])
) %>%
# visualize variants all
m_set_style(
sel = m_sel(resi = variant.df %>% .$Position_in_structure,
atom = "CA",
chain = c("A")),
style = m_style_sphere(colorScheme = NULL,
color = sub_color[1],
scale = sub_scale[1])
)
if  (input$gnomad_m == TRUE) {
modelo <- modelo %>% m_set_style(
sel = m_sel(resi = gnomad.df$Position_in_structure,
atom = "CA",
chain = c("A")),
style = m_style_sphere(colorScheme = NULL,
color = sub_color[2],
scale = sub_scale[2]))
}
return(modelo)
})
output$compareTableResearch <- DT::renderDataTable({
req(res_mod())
z <- res_mod()
datatable(z %>%
select(Domain, Original_cDNA_change, Original_AA_change, Origin,Cleft_palate,Low_BMD,Abnormal_brainMRI,Age_walk_months,Age_first_word_months,Total_speech,Dental_issues,Clinical_seizures,Behavior_anomalies,Sleep_problems,Published_in),
extensions = "Buttons",
colnames = c("Domain","cDNA level","Protein level","Origin","CP","Low BMD","Abnl MRI","Walk at", "Talk at","Speech","Abnl Teeth","Seizures", "Abnl behaviour","Abnl sleep","Link"),
options = list(dom = 'Brtip',
buttons = c('csv', 'excel'), pageLength=100, scrollY = "350px"), escape = FALSE)
})
output$compareTableResearch2 <- DT::renderDataTable({
req(res_mod())
z <- res_mod()
datatable(z %>%
select(Domain, Original_cDNA_change, Original_AA_change, Origin,Cleft_palate,Low_BMD,Abnormal_brainMRI,Age_walk_months,Age_first_word_months,Total_speech,Dental_issues,Clinical_seizures,Behavior_anomalies,Sleep_problems,Published_in),
extensions = "Buttons",
colnames = c("Domain","cDNA level","Protein level","Origin","CP","Low BMD","Abnl MRI","Walk at", "Talk at","Speech","Abnl Teeth","Seizures", "Abnl behaviour","Abnl sleep","Link"),
options = list(dom = 'Brtip',
buttons = c('csv', 'excel'), pageLength=100, scrollY = "350px"), escape = FALSE)
})
### Phenotype Interface ####
output$research_phenotype1 <- renderPlotly({
plot <- plot_ly(res_mod() %>%
dplyr::rename(phenotype_fac = Domain) %>%
filter(phenotype_fac != "NA") %>%
mutate(phenotype_fac =ifelse(phenotype_fac == "Yes"," Yes",phenotype_fac)) %>%
select(phenotype_fac) %>%
arrange(phenotype_fac) %>%
mutate(phenotype_fac = factor(phenotype_fac,
levels = c("N-terminus","ULD Domain","Domain-Linker1","CUTL Domain","Domain-Linker2","CUT1 Domain","Domain-Linker3","CUT2 Domain","Domain-Linker4", "HOX","C-terminus"))) %>%
group_by(phenotype_fac) %>%
dplyr::summarise(n = n()) %>%
mutate(n_gene = sum(n))%>%
assign("save",.,envir = .GlobalEnv),
x = ~ phenotype_fac,
y = ~ round(n, digits = 2),
color = ~ phenotype_fac,
colors = lolliplot_fill_scheme,
type = "bar",
hoverinfo = "text", showlegend = FALSE,
text= ~ paste0(round(n, digits = 2), " (" ,n," individuals)")) %>%
layout(title = "Patient distribution according to variant location",
font=plotly_font,
xaxis = list(title="",showline = T, tickangle = 45),
yaxis = list(title="N of individuals",showline = T),
margin = list(b = 160)) %>%
config(modeBarButtonsToRemove = goodbye, displaylogo = FALSE)
return(plot)
})
output$research_phenotype2 <- renderPlotly({
plot <- plot_ly(res_mod() %>%
dplyr::rename(phenotype_fac = Total_speech) %>%
filter(phenotype_fac != "NA") %>%
filter(!is.na(phenotype_fac)) %>%
mutate(phenotype_fac = factor(phenotype_fac, levels = c("None","1 to 10","10 to 50","Greater than 50"))) %>%
group_by(phenotype_fac) %>%
dplyr::summarise(n = n()) %>%
mutate(n_gene = sum(n) )%>%
assign("save",.,envir = .GlobalEnv),
x = ~ phenotype_fac,
y = ~ round(n, digits = 2),
color = ~ phenotype_fac,
colors = basic_phenotype_colors_speech,
type = "bar",
hoverinfo = "text", showlegend = FALSE,
text = ~ paste0(round(n, digits = 2), " (" ,n," individuals)")) %>%
layout(title = "Proportion of individuals according\nto total number of words spoken",
font=plotly_font,
xaxis = list(title = "",showline = T, tickangle = 45),
yaxis = list(title = "N of individuals", showline = T),
margin = list(b = 160)) %>%
config(modeBarButtonsToRemove = goodbye, displaylogo = FALSE)
return(plot)
})
output$research_phenotype3 <- renderPlotly({
plot <- plot_ly(res_mod() %>%
dplyr::rename(phenotype_fac = Clinical_seizures) %>%
filter(phenotype_fac != "NA") %>%
filter(!is.na(phenotype_fac)) %>%
mutate(phenotype_fac =factor(phenotype_fac, levels = c("Yes","No"))) %>%
group_by(phenotype_fac) %>%
dplyr::summarise(n = n()) %>%
mutate(n_gene = sum(n))%>%
assign("save",.,envir = .GlobalEnv),
x = ~ phenotype_fac,
y = ~ round(n, digits = 2),
color = ~ phenotype_fac,
colors = basic_phenotype_colors_yes_no,
type = "bar",
hoverinfo = "text", showlegend = FALSE,
text= ~ paste0(round(n, digits = 2), " (" ,n," individuals)")) %>%
layout(title = "Clinical seizures",
font = plotly_font,
xaxis = list(title= "", showline = T, tickangle = 45),
yaxis = list(title = "N of individuals", showline = T),
margin = list(b = 160)) %>%
config(modeBarButtonsToRemove = goodbye, displaylogo = FALSE)
return(plot)
})
output$research_phenotype4 <- renderPlotly({
plot <- res_mod() %>%
filter(!is.na(AA_pos)) %>%
rename(Phenotype1 = "Autism") %>%
filter(!is.na(Phenotype1)) %>%
mutate(Phenotype1 = factor(Phenotype1, levels = c("Yes","No"))) %>%
group_by(Gene, Phenotype1) %>% summarise(n = n())  %>% ungroup() %>%
plot_ly(
x=~Phenotype1, y=~n, type="bar", alpha = 0.8, color = ~Phenotype1,colors= basic_phenotype_colors_autism) %>%
layout(title=research_phenotype4_title ,font=plotly_font, yaxis = list(showline = T, title = "Number"),
margin = list(t =50),
xaxis = list(title = "",  showline = T,tickangle = 45)
) %>% config(modeBarButtonsToRemove = goodbye, displaylogo = FALSE)
return(plot)
})
output$research_phenotype5 <- renderPlotly({
plot <- res_mod() %>%
filter(!is.na(AA_pos)) %>%
rename(Phenotype1 = "ID_after_sz_onset") %>%
group_by(Gene, Phenotype1) %>% summarise(n = n())  %>% ungroup() %>%
plot_ly(
x=~Phenotype1, y=~n, type="bar", alpha = 0.8, color = ~Phenotype1,colors= basic_phenotype_colors_ID) %>%
layout(title=research_phenotype5_title ,font=plotly_font, yaxis = list(showline = T, title = "Number"),
margin = list(t =50),
xaxis = list(title = "",  showline = T,tickangle = 45)
) %>% config(modeBarButtonsToRemove = goodbye, displaylogo = FALSE)
return(plot)
})
output$research_phenotype6 <- renderPlotly({
plot <- res_mod() %>%
filter(!is.na(AA_pos)) %>%
rename(Phenotype1 = "Epilepsy_syndrome") %>%
filter(Phenotype1  != "Unavailable") %>%
mutate(Phenotype1 = ifelse(Phenotype1 == "No seizures","No seizures",Phenotype1)) %>%
group_by(Gene, Phenotype1) %>% summarise(n = n())  %>% ungroup() %>%
plot_ly(
x=~Phenotype1, y=~n, type="bar", alpha = 0.8, color = ~Phenotype1,colors= c("#bdb0b9","#5a94f4","#491919")) %>%
layout(title=research_phenotype6_title ,font=plotly_font, yaxis = list(showline = T, title = "Number"),
margin = list(t =50),
xaxis = list(title = "",  showline = T,tickangle = 45)
) %>% config(modeBarButtonsToRemove = goodbye, displaylogo = FALSE)
return(plot)
})
### Functional Interface
output$research_functional1 <- renderPlotly({
data.df <- res_mod() %>%
rename(func_effect = "uptake") %>%
filter(!is.na(func_effect)) %>%
distinct(func_effect,AA_pos,AA_alt)
validate(need(
nrow(data.df) >0,
"There is no data that matches your filters."
))
plot <- plot_ly() %>%
add_boxplot(data = data.df ,
y = ~func_effect, type = "box", x= 0, boxpoints = "all",
color = I("gray")) %>%
layout(yaxis = list(title = "GABA uptake realtive to WT"),
title = "GABA uptake rate",
xaxis = list(title = "",
zeroline = FALSE,
showline = FALSE,
showticklabels = FALSE,
showgrid = FALSE),
font = plotly_font,
showlegend = F,
margin = list(t = 60)) %>%
config(modeBarButtonsToRemove = goodbye, displaylogo = FALSE)
return(plot)
})
output$research_functional2 <- renderPlotly({
data.df <- res_mod() %>%
rename(func_effect = "surface_exp") %>%
filter(!is.na(func_effect)) %>%
distinct(func_effect,AA_pos,AA_alt)
validate(need(
nrow(data.df) >0,
"There is no data that matches your filters."
))
plot <- plot_ly() %>%
add_boxplot(data = data.df ,
y = ~func_effect, type = "box", x= 0, boxpoints = "all",
color = I("gray")) %>%
layout(yaxis = list(title = "Surface expression realtive to WT"),
title = "Surface expression",
titlefont = list(size = 20),
xaxis = list(title = "",
zeroline = FALSE,
showline = FALSE,
showticklabels = FALSE,
showgrid = FALSE),
font = plotly_font,
showlegend = F,
margin = list(t = 60)) %>%
config(modeBarButtonsToRemove = goodbye, displaylogo = FALSE)
return(plot)
})
output$research_functional3 <- renderPlotly({
data.df <- res_mod() %>%
rename(func_effect = "total_exp") %>%
filter(!is.na(func_effect)) %>%
distinct(func_effect,AA_pos,AA_alt)
validate(need(
nrow(data.df) >0,
"There is no data that matches your filters."
))
plot <- plot_ly() %>%
add_boxplot(data = data.df ,
y = ~func_effect, type = "box", x= 0, boxpoints = "all",
color = I("gray")) %>%
layout(yaxis = list(title = "Total expression realtive to WT"),
title = "Total expression",
titlefont = list(size = 20),
xaxis = list(title = "",
zeroline = FALSE,
showline = FALSE,
showticklabels = FALSE,
showgrid = FALSE),
font = plotly_font,
showlegend = F,
margin = list(t = 60)) %>%
config(modeBarButtonsToRemove = goodbye, displaylogo = FALSE)
return(plot)
})
output$research_functional4 <- renderPlotly({
data.df <- res_mod() %>%
rename(func_effect = "relative_update_surface_exp") %>%
filter(!is.na(func_effect)) %>%
distinct(func_effect,AA_pos,AA_alt)
validate(need(
nrow(data.df) >0,
"There is no data that matches your filters."
))
plot <- plot_ly() %>%
add_boxplot(data = data.df ,
y = ~func_effect, type = "box", x= 0, boxpoints = "all",
color = I("gray")) %>%
layout(yaxis = list(title = "Relative uptake to surface expression"),
title = "Relative uptake to surface expression",
titlefont = list(size = 20),
xaxis = list(title = "",
zeroline = FALSE,
showline = FALSE,
showticklabels = FALSE,
showgrid = FALSE),
font = plotly_font,
showlegend = F,
margin = list(t = 60)) %>%
config(modeBarButtonsToRemove = goodbye, displaylogo = FALSE)
return(plot)
})
output$research_functional5 <- renderPlotly({
data.df <- res_mod() %>%
rename(func_effect = "relative_surface_exp_tot_exp") %>%
filter(!is.na(func_effect)) %>%
distinct(func_effect,AA_pos,AA_alt)
validate(need(
nrow(data.df) >0,
"There is no data that matches your filters."
))
plot <- plot_ly() %>%
add_boxplot(data = data.df ,
y = ~func_effect, type = "box", x= 0, boxpoints = "all",
color = I("gray")) %>%
layout(yaxis = list(title = "Relative surface expression\n to total expression"),
title = "Relative surface expression to total expression",
titlefont = list(size = 20),
xaxis = list(title = "",
zeroline = FALSE,
showline = FALSE,
showticklabels = FALSE,
showgrid = FALSE),
font = plotly_font,
showlegend = F,
margin = list(t = 60)) %>%
config(modeBarButtonsToRemove = goodbye, displaylogo = FALSE)
return(plot)
})
output$functional_structure_legend_plot <- renderPlot({
legend <- data.frame(x=c(1,7,14,21,28), y=c(1, 1, 1,1,1), text=c("LoF", "GoF", "Mixed", "Complex","STW"))
plot <- ggplot(legend, aes(x=x, y=y, color=text))+
geom_point(size = 6)+
scale_color_manual(values = c("LoF"="#cc0000","GoF"="#66ffff","Mixed"="#ff8000","Complex"="#6600cc","STW"="#c0c0c0"))+
ylim(c(0,2))+
xlim(c(0,32))+
theme_void()+
geom_text(aes(label=text), hjust=-0.4, color="black")+
theme(legend.position = "none")
return(plot)
})
output$threeDmolfunctional <- renderR3dmol({
selection_data.df <- res_mod()
if(selection_data.df$Gene %>% unique() %>% length()== 4){
genes_selected <-master.df$Gene %>% unique()
}else{
genes_selected <- selection_data.df$Gene %>% unique()
}
variant.df <- master.df %>%
left_join(Functional_data.df %>% distinct(Gene,AA_pos,functional_effect), by = c("AA_pos" = "AA_pos","Gene" = "Gene")) %>%
left_join(all_exchanges.df %>% distinct(Domain,Gene,AA_pos), by = c("AA_pos" = "AA_pos","Gene" = "Gene")) %>%
mutate(AA_ref = aaa(AA_ref)) %>%
filter(Domain %in% selection_data.df$Domain,
AA_ref %in% selection_data.df$AA_ref[!is.na(selection_data.df$AA_ref)],
Gene %in% genes_selected,
functional_effect %in% selection_data.df$functional_effect) %>%
filter(!is.na(functional_effect)) %>%
distinct(Aln_pos,Domain,functional_effect) %>%
group_by(Aln_pos) %>%
summarise(functional_effect = ifelse(unique(functional_effect) %>% length() ==1,functional_effect,"complex")) %>%
left_join(master.df %>% filter(Gene == "SCN2A") %>% distinct(AA_pos,AA_ref,Aln_pos,Gene))
structure.df <- read_delim("data/pdb/6j8e_structure_coordinates.txt",delim = "\t") %>%
select(Uniprot_position,Aminoacid,Position_in_structure,gene,chain)
variant.df <- variant.df %>%
left_join(structure.df,by = c("AA_pos" = "Uniprot_position","AA_ref" = "Aminoacid","Gene" = "gene")) %>%
mutate(struc_cov = ifelse(is.na(Position_in_structure),"no","yes")) %>%
filter(struc_cov == "yes")
sub_color <- c("#cc0000","#66ffff", "#ff8000","#6600cc","#c0c0c0")
sub_scale <- c(1.2,0.8)
struc_color <- "white"
rot = 270
rot_axis = "x"
spin_axis = "vy"
#Specify yourself- color of the cartoon per subunit
subunit_color <- c("wheat","white") #first color for GRIN1 second or GRIN2A
#Model for the protein complex
modelo <- r3dmol(
viewer_spec = m_viewer_spec(
cartoonQuality = 10,
lowerZoomLimit = 50,
upperZoomLimit = 1000
)
modelo <- modelo %>% m_add_model(data = "data/pdb/SCN2A_model.pdb1", format = "pdb")
# Zoom to encompass the whole scene
modelo <-modelo %>% m_zoom_to() %>%
# Set color o cartoon representation
m_set_style(style = m_style_cartoon(color = struc_color)) %>% # select a color of the structure
# Set subunit colors
m_set_style(
sel = m_sel(chain = c("A")),
style = m_style_cartoon(color = subunit_color[2])
) %>%
# visualize variants all
m_set_style(
sel = m_sel(resi = variant.df %>% filter(functional_effect == "LoF") %>% .$Position_in_structure,
atom = "CA",
chain = c("A")),
style = m_style_sphere(colorScheme = NULL,
color = sub_color[1],
scale = sub_scale[1])
) %>%
#visualize variants SCN1A
m_set_style(
sel = m_sel(resi = variant.df %>% filter(functional_effect == "GoF") %>% .$Position_in_structure,
atom = "CA",
chain = c("A")),
style = m_style_sphere(colorScheme = NULL,
color = sub_color[2],
scale = sub_scale[1])
) %>%
#visualize variants SCN2A
m_set_style(
sel = m_sel(resi = variant.df %>% filter(functional_effect == "Mixed") %>% .$Position_in_structure,
atom = "CA",
chain = c("A")),
style = m_style_sphere(colorScheme = NULL,
color = sub_color[3],
scale = sub_scale[1])
)  %>%
# visualize variants SCN3A
m_set_style(
sel = m_sel(resi = variant.df %>% filter(functional_effect == "complex") %>% .$Position_in_structure,
atom = "CA",
chain = c("A")),
style = m_style_sphere(colorScheme = NULL,
color = sub_color[4],
scale = sub_scale[1])
) %>%
# visualize variants SCN8A
m_set_style(
sel = m_sel(resi = variant.df %>% filter(functional_effect == "STW") %>% .$Position_in_structure,
atom = "CA",
chain = c("A")),
style = m_style_sphere(colorScheme = NULL,
color = sub_color[5],
scale = sub_scale[1])
)
return(modelo)
})
z
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
deployApp(account = "lal-portals", appName = "SATB2-Portal")
